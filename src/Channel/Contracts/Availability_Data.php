<?php
/** @noinspection PhpUnused */

declare(strict_types=1);

namespace ApplicationInsights\Channel\Contracts;

/**
 * Data contract class for type Availability_Data. Instances of AvailabilityData represent the result of executing an availability test.
 */
class Availability_Data extends Base_Data implements Data_Interface
{
    public const RUN_LOCATION         = 'runLocation';
    public const AVAILABILITY_MESSAGE = 'message';

    /**
     * Creates a new AvailabilityData.
     */
    public function __construct()
    {
        parent::__construct();

        $this->_envelopeTypeName = 'Microsoft.ApplicationInsights.Availability';
        $this->_dataTypeName     = 'AvailabilityData';
        $this->setVer(2);

        $this->_data->put('id', null);
        $this->_data->put('name', null);
        $this->_data->put('duration', null);
        $this->_data->put('success', null);
    }

    /**
     * Gets the id field. Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the service.
     */
    public function getId(): ?string
    {
        if ($this->_data->hasKey('id')) {
            return $this->_data->get('id');
        }
        return null;
    }

    /**
     * Sets the id field. Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the service.
     */
    public function setId(string $id): void
    {
        $this->_data->put('id', $id);
    }

    /**
     * Gets the duration field. Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     */
    public function getDuration(): ?string
    {
        if ($this->_data->hasKey('duration')) {
            return $this->_data->get('duration');
        }
        return null;
    }

    /**
     * Sets the duration field. Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     */
    public function setDuration(string $duration): void
    {
        $this->_data->put('duration', $duration);
    }

    /**
     * Gets the success field. Success flag.
     */
    public function getSuccess(): ?bool
    {
        if ($this->_data->hasKey('success')) {
            return (bool)$this->_data->get('success');
        }
        return null;
    }

    /**
     * Sets the success field. Success flag.
     */
    public function setSuccess(bool $success): void
    {
        $this->_data->put('success', $success);
    }

    /**
     * Gets the runLocation field. Name of the location where the test was run from.
     */
    public function getRunLocation(): ?string
    {
        if ($this->_data->hasKey(self::RUN_LOCATION)) {
            return $this->_data->get(self::RUN_LOCATION);
        }
        return null;
    }

    /**
     * Sets the runLocation field. Name of the location where the test was run from.
     */
    public function setRunLocation(string $runLocation): void
    {
        $this->_data->put(self::RUN_LOCATION, $runLocation);
    }

    /**
     * Gets the message field. Diagnostic message for the result.
     */
    public function getMessage(): ?string
    {
        if ($this->_data->hasKey(self::AVAILABILITY_MESSAGE)) {
            return $this->_data->get(self::AVAILABILITY_MESSAGE);
        }
        return null;
    }

    /**
     * Sets the message field. Diagnostic message for the result.
     */
    public function setMessage(string $message): void
    {
        $this->_data->put(self::AVAILABILITY_MESSAGE, $message);
    }
}
